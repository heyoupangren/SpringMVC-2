<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--配置自动扫描的包-->
    <context:component-scan base-package="com.cwh.springmvc"></context:component-scan>

    <!--配置视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    <!--
        default-servlet-handler 将在SpringMVC 上下文中定义一个DefaultServletHttpRequestHandler，
        它会对进入DispatcherServlet的请求进行筛选，如果发现是没有经过映射的请求，就将该请求交由WEB应用服务器默认的
        Servlet 处理，如果不是静态资源的请求，才由DispatcherServlet继续处理

        一般WEB 应用服务器默认的Servlet 的名称都是defined
        若所使用的WEB 服务器的默认Servlet 的名称不是defined。则需要通过default-servlet-name 属性显式指定
    -->
    <mvc:default-servlet-handler/>

    <mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>

    <!--配置ConversionService-->
   <!--ConversionServiceFactoryBean-->
    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="employeeConverter"/>
            </set>
        </property>
    </bean>

    <!--配置国际化资源文件-->
    <bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="i18n"></property>
    </bean>

   <!-- <mvc:view-controller path="/i18n" view-name="i18n"/>-->
    <mvc:view-controller path="/i18n2" view-name="i18n2"/>

    <!--配置 SessionLocaleResolver-->
    <bean id="localeResolver"
          class="org.springframework.web.servlet.i18n.SessionLocaleResolver">

    </bean>

    <!--配置 LocaleChangeInterceptor-->
    <mvc:interceptors>
        <!--配置自定义拦截器-->
        <bean class="com.cwh.springmvc.interceptor.FirstInterceptor"></bean>

        <!--配置拦截器(不)作用的路径-->
        <mvc:interceptor>
            <mvc:mapping path="/emps"/>
            <bean class="com.cwh.springmvc.interceptor.SecondInterceptor"></bean>
        </mvc:interceptor>

        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
    </mvc:interceptors>

    <!--配置 MultipartResolver-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="maxUploadSize" value="1024000"></property>
    </bean>

    <!--配置使用testSimpleMappingExceptionResolver 来映射异常-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionAttribute" value="ex"></property>
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.ArrayIndexOutOfBoundsException">error</prop>
            </props>
        </property>
    </bean>

    <!--
        需要进行Spring整合SpringMVC 吗？
        还是否需要加入Spring 的IOC容器？
        时候需要在web.xml 文件中配置启动Spring

        1.需要：通常情况下，类似于数据源，事务，整合其他框架都放在Spring的配置文件中，(而不是放在SpringMVC 的配置文件中)，
        实际上放入Spring 位置文件对应的IOC容器中的还有service和Dao
        2.不需要：都放在SpringMVC 的配置文件中，也可以分多个Spring的配置文件，然后使用import 节点导入其他的配置文件
    -->
    <!--
        问题：若Spring 的IOC 容器和SpringMVC的 IOC 容器 扫描的包有重复的部分，就会导致有的bean会被创建两次
        解决：1.使Spring的IOC容器扫描的包和SpringMVC 的IOC容器扫描的包没有重合的部分
             2.使用exclude-filter 和include-filter子节点来规定只能扫描的注解
    -->

</beans>